//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     Fetch a list of Attributes
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attributesComputedGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Attribute]?,_ error: Error?) -> Void)) {
        attributesComputedGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Attributes
     - GET /attributes/computed
     - Without params, it returns a list of Attributes the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "expression" : "expression",
  "description" : "description",
  "id" : 0,
  "attribute" : "attribute",
  "type" : "type"
}, {
  "expression" : "expression",
  "description" : "description",
  "id" : 0,
  "attribute" : "attribute",
  "type" : "type"
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Attribute]> 
     */
    open class func attributesComputedGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Attribute]> {
        let path = "/attributes/computed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Attribute]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an Attribute
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attributesComputedIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        attributesComputedIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete an Attribute
     - DELETE /attributes/computed/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func attributesComputedIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/attributes/computed/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an Attribute
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attributesComputedIdPut(_id: Int, body: Attribute, completion: @escaping ((_ data: Attribute?,_ error: Error?) -> Void)) {
        attributesComputedIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an Attribute
     - PUT /attributes/computed/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "expression" : "expression",
  "description" : "description",
  "id" : 0,
  "attribute" : "attribute",
  "type" : "type"
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Attribute> 
     */
    open class func attributesComputedIdPutWithRequestBuilder(_id: Int, body: Attribute) -> RequestBuilder<Attribute> {
        var path = "/attributes/computed/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Attribute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an Attribute
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attributesComputedPost(body: Attribute, completion: @escaping ((_ data: Attribute?,_ error: Error?) -> Void)) {
        attributesComputedPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an Attribute
     - POST /attributes/computed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "expression" : "expression",
  "description" : "description",
  "id" : 0,
  "attribute" : "attribute",
  "type" : "type"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Attribute> 
     */
    open class func attributesComputedPostWithRequestBuilder(body: Attribute) -> RequestBuilder<Attribute> {
        let path = "/attributes/computed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Attribute>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Calendars
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calendarsGet(all: Bool? = nil, userId: Int? = nil, completion: @escaping ((_ data: [Calendar]?,_ error: Error?) -> Void)) {
        calendarsGetWithRequestBuilder(all: all, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Calendars
     - GET /calendars
     - Without params, it returns a list of Calendars the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "data" : "data",
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}, {
  "data" : "data",
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)

     - returns: RequestBuilder<[Calendar]> 
     */
    open class func calendarsGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil) -> RequestBuilder<[Calendar]> {
        let path = "/calendars"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Calendar]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Calendar
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calendarsIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        calendarsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Calendar
     - DELETE /calendars/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func calendarsIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/calendars/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Calendar
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calendarsIdPut(_id: Int, body: Calendar, completion: @escaping ((_ data: Calendar?,_ error: Error?) -> Void)) {
        calendarsIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Calendar
     - PUT /calendars/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "data" : "data",
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Calendar> 
     */
    open class func calendarsIdPutWithRequestBuilder(_id: Int, body: Calendar) -> RequestBuilder<Calendar> {
        var path = "/calendars/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Calendar>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Calendar
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calendarsPost(body: Calendar, completion: @escaping ((_ data: Calendar?,_ error: Error?) -> Void)) {
        calendarsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Calendar
     - POST /calendars
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "data" : "data",
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Calendar> 
     */
    open class func calendarsPostWithRequestBuilder(body: Calendar) -> RequestBuilder<Calendar> {
        let path = "/calendars"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Calendar>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Saved Commands
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Command]?,_ error: Error?) -> Void)) {
        commandsGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Saved Commands
     - GET /commands
     - Without params, it returns a list of Drivers the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
}, {
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Command]> 
     */
    open class func commandsGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Command]> {
        let path = "/commands"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Command]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Saved Command
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        commandsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Saved Command
     - DELETE /commands/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func commandsIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/commands/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Saved Command
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsIdPut(_id: Int, body: Command, completion: @escaping ((_ data: Command?,_ error: Error?) -> Void)) {
        commandsIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Saved Command
     - PUT /commands/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Command> 
     */
    open class func commandsIdPutWithRequestBuilder(_id: Int, body: Command) -> RequestBuilder<Command> {
        var path = "/commands/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Command>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Saved Command
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsPost(body: Command, completion: @escaping ((_ data: Command?,_ error: Error?) -> Void)) {
        commandsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Saved Command
     - POST /commands
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Command> 
     */
    open class func commandsPostWithRequestBuilder(body: Command) -> RequestBuilder<Command> {
        let path = "/commands"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Command>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Saved Commands supported by Device at the moment
     
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsSendGet(deviceId: Int? = nil, completion: @escaping ((_ data: [Command]?,_ error: Error?) -> Void)) {
        commandsSendGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Saved Commands supported by Device at the moment
     - GET /commands/send
     - Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
}, {
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
} ]}]
     
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)

     - returns: RequestBuilder<[Command]> 
     */
    open class func commandsSendGetWithRequestBuilder(deviceId: Int? = nil) -> RequestBuilder<[Command]> {
        let path = "/commands/send"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Command]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Dispatch commands to device
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsSendPost(body: Command, completion: @escaping ((_ data: Command?,_ error: Error?) -> Void)) {
        commandsSendPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Dispatch commands to device
     - POST /commands/send
     - Dispatch a new command or Saved Command if _body.id_ set
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "deviceId" : 6
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Command> 
     */
    open class func commandsSendPostWithRequestBuilder(body: Command) -> RequestBuilder<Command> {
        let path = "/commands/send"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Command>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of available Commands for the Device or all possible Commands if Device ommited
     
     - parameter deviceId: (query) Internal device identifier. Only works if device has already reported some locations (optional)
     - parameter _protocol: (query) Protocol name. Can be used instead of device id (optional)
     - parameter textChannel: (query) When &#x60;true&#x60; return SMS commands. If not specified or &#x60;false&#x60; return data commands (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func commandsTypesGet(deviceId: Int? = nil, _protocol: String? = nil, textChannel: Bool? = nil, completion: @escaping ((_ data: [CommandType]?,_ error: Error?) -> Void)) {
        commandsTypesGetWithRequestBuilder(deviceId: deviceId, _protocol: _protocol, textChannel: textChannel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of available Commands for the Device or all possible Commands if Device ommited
     - GET /commands/types
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "type" : "type"
}, {
  "type" : "type"
} ]}]
     
     - parameter deviceId: (query) Internal device identifier. Only works if device has already reported some locations (optional)
     - parameter _protocol: (query) Protocol name. Can be used instead of device id (optional)
     - parameter textChannel: (query) When &#x60;true&#x60; return SMS commands. If not specified or &#x60;false&#x60; return data commands (optional)

     - returns: RequestBuilder<[CommandType]> 
     */
    open class func commandsTypesGetWithRequestBuilder(deviceId: Int? = nil, _protocol: String? = nil, textChannel: Bool? = nil) -> RequestBuilder<[CommandType]> {
        let path = "/commands/types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId?.encodeToJSON(), 
            "protocol": _protocol, 
            "textChannel": textChannel
        ])

        let requestBuilder: RequestBuilder<[CommandType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of Devices
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter _id: (query) To fetch one or more devices. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60; (optional)
     - parameter uniqueId: (query) To fetch one or more devices. Multiple params can be passed like &#x60;uniqueId&#x3D;333331&amp;uniqieId&#x3D;44442&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesGet(all: Bool? = nil, userId: Int? = nil, _id: Int? = nil, uniqueId: String? = nil, completion: @escaping ((_ data: [Device]?,_ error: Error?) -> Void)) {
        devicesGetWithRequestBuilder(all: all, userId: userId, _id: _id, uniqueId: uniqueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Devices
     - GET /devices
     - Without any params, returns a list of the user's devices
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "groupId" : 1,
  "positionId" : 6,
  "phone" : "phone",
  "geofenceIds" : [ 5, 5 ],
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "contact" : "contact",
  "name" : "name",
  "disabled" : true,
  "model" : "model",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "category" : "category",
  "uniqueId" : "uniqueId",
  "status" : "status"
}, {
  "groupId" : 1,
  "positionId" : 6,
  "phone" : "phone",
  "geofenceIds" : [ 5, 5 ],
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "contact" : "contact",
  "name" : "name",
  "disabled" : true,
  "model" : "model",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "category" : "category",
  "uniqueId" : "uniqueId",
  "status" : "status"
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter _id: (query) To fetch one or more devices. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60; (optional)
     - parameter uniqueId: (query) To fetch one or more devices. Multiple params can be passed like &#x60;uniqueId&#x3D;333331&amp;uniqieId&#x3D;44442&#x60; (optional)

     - returns: RequestBuilder<[Device]> 
     */
    open class func devicesGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, _id: Int? = nil, uniqueId: String? = nil) -> RequestBuilder<[Device]> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "id": _id?.encodeToJSON(), 
            "uniqueId": uniqueId
        ])

        let requestBuilder: RequestBuilder<[Device]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update total distance and hours of the Device
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesIdAccumulatorsPut(_id: Int, body: DeviceAccumulators, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        devicesIdAccumulatorsPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update total distance and hours of the Device
     - PUT /devices/{id}/accumulators
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func devicesIdAccumulatorsPutWithRequestBuilder(_id: Int, body: DeviceAccumulators) -> RequestBuilder<Void> {
        var path = "/devices/{id}/accumulators"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Device
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        devicesIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Device
     - DELETE /devices/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func devicesIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/devices/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Device
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesIdPut(_id: Int, body: Device, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        devicesIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Device
     - PUT /devices/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "groupId" : 1,
  "positionId" : 6,
  "phone" : "phone",
  "geofenceIds" : [ 5, 5 ],
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "contact" : "contact",
  "name" : "name",
  "disabled" : true,
  "model" : "model",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "category" : "category",
  "uniqueId" : "uniqueId",
  "status" : "status"
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Device> 
     */
    open class func devicesIdPutWithRequestBuilder(_id: Int, body: Device) -> RequestBuilder<Device> {
        var path = "/devices/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Device
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicesPost(body: Device, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        devicesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Device
     - POST /devices
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "groupId" : 1,
  "positionId" : 6,
  "phone" : "phone",
  "geofenceIds" : [ 5, 5 ],
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "contact" : "contact",
  "name" : "name",
  "disabled" : true,
  "model" : "model",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "category" : "category",
  "uniqueId" : "uniqueId",
  "status" : "status"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Device> 
     */
    open class func devicesPostWithRequestBuilder(body: Device) -> RequestBuilder<Device> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Drivers
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func driversGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Driver]?,_ error: Error?) -> Void)) {
        driversGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Drivers
     - GET /drivers
     - Without params, it returns a list of Drivers the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "uniqueId" : "uniqueId"
}, {
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "uniqueId" : "uniqueId"
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Driver]> 
     */
    open class func driversGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Driver]> {
        let path = "/drivers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Driver]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Driver
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func driversIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        driversIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Driver
     - DELETE /drivers/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func driversIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/drivers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Driver
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func driversIdPut(_id: Int, body: Driver, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        driversIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Driver
     - PUT /drivers/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "uniqueId" : "uniqueId"
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Driver> 
     */
    open class func driversIdPutWithRequestBuilder(_id: Int, body: Driver) -> RequestBuilder<Driver> {
        var path = "/drivers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Driver
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func driversPost(body: Driver, completion: @escaping ((_ data: Driver?,_ error: Error?) -> Void)) {
        driversPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Driver
     - POST /drivers
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "uniqueId" : "uniqueId"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Driver> 
     */
    open class func driversPostWithRequestBuilder(body: Driver) -> RequestBuilder<Driver> {
        let path = "/drivers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Driver>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsIdGet(_id: Int, completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        eventsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /events/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "maintenanceId" : 5,
  "positionId" : 1,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "geofenceId" : 5,
  "type" : "type",
  "deviceId" : 6
}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Event> 
     */
    open class func eventsIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<Event> {
        var path = "/events/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Event>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of Geofences
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geofencesGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Geofence]?,_ error: Error?) -> Void)) {
        geofencesGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Geofences
     - GET /geofences
     - Without params, it returns a list of Geofences the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "area" : "area",
  "calendarId" : 6,
  "name" : "name",
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}, {
  "area" : "area",
  "calendarId" : 6,
  "name" : "name",
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Geofence]> 
     */
    open class func geofencesGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Geofence]> {
        let path = "/geofences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Geofence]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Geofence
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geofencesIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        geofencesIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Geofence
     - DELETE /geofences/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func geofencesIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/geofences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Geofence
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geofencesIdPut(_id: Int, body: Geofence, completion: @escaping ((_ data: Geofence?,_ error: Error?) -> Void)) {
        geofencesIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Geofence
     - PUT /geofences/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "area" : "area",
  "calendarId" : 6,
  "name" : "name",
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Geofence> 
     */
    open class func geofencesIdPutWithRequestBuilder(_id: Int, body: Geofence) -> RequestBuilder<Geofence> {
        var path = "/geofences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geofence>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Geofence
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geofencesPost(body: Geofence, completion: @escaping ((_ data: Geofence?,_ error: Error?) -> Void)) {
        geofencesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Geofence
     - POST /geofences
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "area" : "area",
  "calendarId" : 6,
  "name" : "name",
  "description" : "description",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Geofence> 
     */
    open class func geofencesPostWithRequestBuilder(body: Geofence) -> RequestBuilder<Geofence> {
        let path = "/geofences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geofence>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Groups
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupsGet(all: Bool? = nil, userId: Int? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        groupsGetWithRequestBuilder(all: all, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Groups
     - GET /groups
     - Without any params, returns a list of the Groups the user belongs to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "groupId" : 6,
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}, {
  "groupId" : 6,
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func groupsGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil) -> RequestBuilder<[Group]> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Group
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupsIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Group
     - DELETE /groups/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupsIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/groups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Group
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupsIdPut(_id: Int, body: Group, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        groupsIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Group
     - PUT /groups/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "groupId" : 6,
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Group> 
     */
    open class func groupsIdPutWithRequestBuilder(_id: Int, body: Group) -> RequestBuilder<Group> {
        var path = "/groups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Group
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupsPost(body: Group, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        groupsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Group
     - POST /groups
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "groupId" : 6,
  "name" : "name",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Group> 
     */
    open class func groupsPostWithRequestBuilder(body: Group) -> RequestBuilder<Group> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Maintenance
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maintenanceGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Maintenance]?,_ error: Error?) -> Void)) {
        maintenanceGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Maintenance
     - GET /maintenance
     - Without params, it returns a list of Maintenance the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "period" : 1.46581298050294517310021547018550336360931396484375,
  "name" : "name",
  "start" : 6.02745618307040320615897144307382404804229736328125,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}, {
  "period" : 1.46581298050294517310021547018550336360931396484375,
  "name" : "name",
  "start" : 6.02745618307040320615897144307382404804229736328125,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Maintenance]> 
     */
    open class func maintenanceGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Maintenance]> {
        let path = "/maintenance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Maintenance]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Maintenance
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maintenanceIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        maintenanceIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Maintenance
     - DELETE /maintenance/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func maintenanceIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/maintenance/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Maintenance
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maintenanceIdPut(_id: Int, body: Maintenance, completion: @escaping ((_ data: Maintenance?,_ error: Error?) -> Void)) {
        maintenanceIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Maintenance
     - PUT /maintenance/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "period" : 1.46581298050294517310021547018550336360931396484375,
  "name" : "name",
  "start" : 6.02745618307040320615897144307382404804229736328125,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Maintenance> 
     */
    open class func maintenanceIdPutWithRequestBuilder(_id: Int, body: Maintenance) -> RequestBuilder<Maintenance> {
        var path = "/maintenance/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Maintenance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Maintenance
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maintenancePost(body: Maintenance, completion: @escaping ((_ data: Maintenance?,_ error: Error?) -> Void)) {
        maintenancePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Maintenance
     - POST /maintenance
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "period" : 1.46581298050294517310021547018550336360931396484375,
  "name" : "name",
  "start" : 6.02745618307040320615897144307382404804229736328125,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Maintenance> 
     */
    open class func maintenancePostWithRequestBuilder(body: Maintenance) -> RequestBuilder<Maintenance> {
        let path = "/maintenance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Maintenance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetch a list of Notifications
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsGet(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil, completion: @escaping ((_ data: [Notification]?,_ error: Error?) -> Void)) {
        notificationsGetWithRequestBuilder(all: all, userId: userId, deviceId: deviceId, groupId: groupId, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Notifications
     - GET /notifications
     - Without params, it returns a list of Notifications the user has access to
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "always" : true,
  "mail" : true,
  "calendarId" : 6,
  "web" : true,
  "sms" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}, {
  "always" : true,
  "mail" : true,
  "calendarId" : 6,
  "web" : true,
  "sms" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
} ]}]
     
     - parameter all: (query) Can only be used by admins or managers to fetch all entities (optional)
     - parameter userId: (query) Standard users can use this only with their own _userId_ (optional)
     - parameter deviceId: (query) Standard users can use this only with _deviceId_s, they have access to (optional)
     - parameter groupId: (query) Standard users can use this only with _groupId_s, they have access to (optional)
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<[Notification]> 
     */
    open class func notificationsGetWithRequestBuilder(all: Bool? = nil, userId: Int? = nil, deviceId: Int? = nil, groupId: Int? = nil, refresh: Bool? = nil) -> RequestBuilder<[Notification]> {
        let path = "/notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": all, 
            "userId": userId?.encodeToJSON(), 
            "deviceId": deviceId?.encodeToJSON(), 
            "groupId": groupId?.encodeToJSON(), 
            "refresh": refresh
        ])

        let requestBuilder: RequestBuilder<[Notification]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Notification
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        notificationsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Notification
     - DELETE /notifications/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func notificationsIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/notifications/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Notification
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsIdPut(_id: Int, body: Notification, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationsIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a Notification
     - PUT /notifications/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "always" : true,
  "mail" : true,
  "calendarId" : 6,
  "web" : true,
  "sms" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationsIdPutWithRequestBuilder(_id: Int, body: Notification) -> RequestBuilder<Notification> {
        var path = "/notifications/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Notification
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsPost(body: Notification, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Notification
     - POST /notifications
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "always" : true,
  "mail" : true,
  "calendarId" : 6,
  "web" : true,
  "sms" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type"
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationsPostWithRequestBuilder(body: Notification) -> RequestBuilder<Notification> {
        let path = "/notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send test notification to current user via Email and SMS
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsTestPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        notificationsTestPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Send test notification to current user via Email and SMS
     - POST /notifications/test
     - BASIC:
       - type: basic
       - name: basicAuth

     - returns: RequestBuilder<Void> 
     */
    open class func notificationsTestPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/notifications/test"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of available Notification types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationsTypesGet(completion: @escaping ((_ data: [NotificationType]?,_ error: Error?) -> Void)) {
        notificationsTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of available Notification types
     - GET /notifications/types
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "type" : "type"
}, {
  "type" : "type"
} ]}]

     - returns: RequestBuilder<[NotificationType]> 
     */
    open class func notificationsTypesGetWithRequestBuilder() -> RequestBuilder<[NotificationType]> {
        let path = "/notifications/types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[NotificationType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unlink an Object from another Object
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permissionsDelete(body: Permission, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        permissionsDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unlink an Object from another Object
     - DELETE /permissions
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func permissionsDeleteWithRequestBuilder(body: Permission) -> RequestBuilder<Void> {
        let path = "/permissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Link an Object to another Object
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func permissionsPost(body: Permission, completion: @escaping ((_ data: Permission?,_ error: Error?) -> Void)) {
        permissionsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Link an Object to another Object
     - POST /permissions
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "attributeId" : 2,
  "calendarId" : 5,
  "driverId" : 7,
  "managedUserId" : 9,
  "groupId" : 1,
  "geofenceId" : 5,
  "userId" : 0,
  "deviceId" : 6
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Permission> 
     */
    open class func permissionsPostWithRequestBuilder(body: Permission) -> RequestBuilder<Permission> {
        let path = "/permissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Permission>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetches a list of Positions
     
     - parameter deviceId: (query) _deviceId_ is optional, but requires the _from_ and _to_ parameters when used (optional)
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (optional)
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (optional)
     - parameter _id: (query) To fetch one or more positions. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func positionsGet(deviceId: Int? = nil, from: Date? = nil, to: Date? = nil, _id: Int? = nil, completion: @escaping ((_ data: [Position]?,_ error: Error?) -> Void)) {
        positionsGetWithRequestBuilder(deviceId: deviceId, from: from, to: to, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a list of Positions
     - GET /positions
     - Without any params, it returns a list of last known positions for all the user's Devices. _from_ and _to_ fields are not required with _id_
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "altitude" : 5.63737665663332876420099637471139430999755859375,
  "address" : "address",
  "latitude" : 1.46581298050294517310021547018550336360931396484375,
  "fixTime" : "2000-01-23T04:56:07.000+00:00",
  "accuracy" : 9.301444243932575517419536481611430644989013671875,
  "deviceTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 6,
  "speed" : 2.3021358869347654518833223846741020679473876953125,
  "network" : {
    "key" : "{}"
  },
  "valid" : true,
  "protocol" : "protocol",
  "outdated" : true,
  "course" : 7.061401241503109105224211816675961017608642578125,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "longitude" : 5.962133916683182377482808078639209270477294921875
}, {
  "altitude" : 5.63737665663332876420099637471139430999755859375,
  "address" : "address",
  "latitude" : 1.46581298050294517310021547018550336360931396484375,
  "fixTime" : "2000-01-23T04:56:07.000+00:00",
  "accuracy" : 9.301444243932575517419536481611430644989013671875,
  "deviceTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 6,
  "speed" : 2.3021358869347654518833223846741020679473876953125,
  "network" : {
    "key" : "{}"
  },
  "valid" : true,
  "protocol" : "protocol",
  "outdated" : true,
  "course" : 7.061401241503109105224211816675961017608642578125,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "longitude" : 5.962133916683182377482808078639209270477294921875
} ]}]
     
     - parameter deviceId: (query) _deviceId_ is optional, but requires the _from_ and _to_ parameters when used (optional)
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (optional)
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (optional)
     - parameter _id: (query) To fetch one or more positions. Multiple params can be passed like &#x60;id&#x3D;31&amp;id&#x3D;42&#x60; (optional)

     - returns: RequestBuilder<[Position]> 
     */
    open class func positionsGetWithRequestBuilder(deviceId: Int? = nil, from: Date? = nil, to: Date? = nil, _id: Int? = nil) -> RequestBuilder<[Position]> {
        let path = "/positions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId?.encodeToJSON(), 
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "id": _id?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Position]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of Events within the time period for the Devices or Groups
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter type: (query) % can be used to return events of all types (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsEventsGet(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, type: [String]? = nil, completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        reportsEventsGetWithRequestBuilder(from: from, to: to, deviceId: deviceId, groupId: groupId, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Events within the time period for the Devices or Groups
     - GET /reports/events
     - At least one _deviceId_ or one _groupId_ must be passed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "maintenanceId" : 5,
  "positionId" : 1,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "geofenceId" : 5,
  "type" : "type",
  "deviceId" : 6
}, {
  "maintenanceId" : 5,
  "positionId" : 1,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "geofenceId" : 5,
  "type" : "type",
  "deviceId" : 6
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter type: (query) % can be used to return events of all types (optional)

     - returns: RequestBuilder<[Event]> 
     */
    open class func reportsEventsGetWithRequestBuilder(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, type: [String]? = nil) -> RequestBuilder<[Event]> {
        let path = "/reports/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId, 
            "groupId": groupId, 
            "type": type, 
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of Positions within the time period for the Devices or Groups
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsRouteGet(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, completion: @escaping ((_ data: [Position]?,_ error: Error?) -> Void)) {
        reportsRouteGetWithRequestBuilder(from: from, to: to, deviceId: deviceId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Positions within the time period for the Devices or Groups
     - GET /reports/route
     - At least one _deviceId_ or one _groupId_ must be passed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "altitude" : 5.63737665663332876420099637471139430999755859375,
  "address" : "address",
  "latitude" : 1.46581298050294517310021547018550336360931396484375,
  "fixTime" : "2000-01-23T04:56:07.000+00:00",
  "accuracy" : 9.301444243932575517419536481611430644989013671875,
  "deviceTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 6,
  "speed" : 2.3021358869347654518833223846741020679473876953125,
  "network" : {
    "key" : "{}"
  },
  "valid" : true,
  "protocol" : "protocol",
  "outdated" : true,
  "course" : 7.061401241503109105224211816675961017608642578125,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "longitude" : 5.962133916683182377482808078639209270477294921875
}, {
  "altitude" : 5.63737665663332876420099637471139430999755859375,
  "address" : "address",
  "latitude" : 1.46581298050294517310021547018550336360931396484375,
  "fixTime" : "2000-01-23T04:56:07.000+00:00",
  "accuracy" : 9.301444243932575517419536481611430644989013671875,
  "deviceTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 6,
  "speed" : 2.3021358869347654518833223846741020679473876953125,
  "network" : {
    "key" : "{}"
  },
  "valid" : true,
  "protocol" : "protocol",
  "outdated" : true,
  "course" : 7.061401241503109105224211816675961017608642578125,
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "longitude" : 5.962133916683182377482808078639209270477294921875
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[Position]> 
     */
    open class func reportsRouteGetWithRequestBuilder(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil) -> RequestBuilder<[Position]> {
        let path = "/reports/route"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId, 
            "groupId": groupId, 
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Position]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of ReportStops within the time period for the Devices or Groups
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsStopsGet(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, completion: @escaping ((_ data: [ReportStops]?,_ error: Error?) -> Void)) {
        reportsStopsGetWithRequestBuilder(from: from, to: to, deviceId: deviceId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of ReportStops within the time period for the Devices or Groups
     - GET /reports/stops
     - At least one _deviceId_ or one _groupId_ must be passed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "duration" : 6,
  "address" : "address",
  "engineHours" : 2,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "lon" : 5.962133916683182377482808078639209270477294921875,
  "endTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 0,
  "deviceName" : "deviceName",
  "lat" : 1.46581298050294517310021547018550336360931396484375
}, {
  "duration" : 6,
  "address" : "address",
  "engineHours" : 2,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "lon" : 5.962133916683182377482808078639209270477294921875,
  "endTime" : "2000-01-23T04:56:07.000+00:00",
  "deviceId" : 0,
  "deviceName" : "deviceName",
  "lat" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[ReportStops]> 
     */
    open class func reportsStopsGetWithRequestBuilder(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil) -> RequestBuilder<[ReportStops]> {
        let path = "/reports/stops"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId, 
            "groupId": groupId, 
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReportStops]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of ReportSummary within the time period for the Devices or Groups
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsSummaryGet(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, completion: @escaping ((_ data: [ReportSummary]?,_ error: Error?) -> Void)) {
        reportsSummaryGetWithRequestBuilder(from: from, to: to, deviceId: deviceId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of ReportSummary within the time period for the Devices or Groups
     - GET /reports/summary
     - At least one _deviceId_ or one _groupId_ must be passed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "engineHours" : 2,
  "distance" : 5.962133916683182377482808078639209270477294921875,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "averageSpeed" : 1.46581298050294517310021547018550336360931396484375,
  "maxSpeed" : 6.02745618307040320615897144307382404804229736328125,
  "deviceId" : 0,
  "deviceName" : "deviceName"
}, {
  "engineHours" : 2,
  "distance" : 5.962133916683182377482808078639209270477294921875,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "averageSpeed" : 1.46581298050294517310021547018550336360931396484375,
  "maxSpeed" : 6.02745618307040320615897144307382404804229736328125,
  "deviceId" : 0,
  "deviceName" : "deviceName"
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[ReportSummary]> 
     */
    open class func reportsSummaryGetWithRequestBuilder(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil) -> RequestBuilder<[ReportSummary]> {
        let path = "/reports/summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId, 
            "groupId": groupId, 
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReportSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of ReportTrips within the time period for the Devices or Groups
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsTripsGet(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil, completion: @escaping ((_ data: [ReportTrips]?,_ error: Error?) -> Void)) {
        reportsTripsGetWithRequestBuilder(from: from, to: to, deviceId: deviceId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of ReportTrips within the time period for the Devices or Groups
     - GET /reports/trips
     - At least one _deviceId_ or one _groupId_ must be passed
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "startLat" : 7.061401241503109105224211816675961017608642578125,
  "distance" : 5.962133916683182377482808078639209270477294921875,
  "startAddress" : "startAddress",
  "endLon" : 2.027123023002321833274663731572218239307403564453125,
  "averageSpeed" : 1.46581298050294517310021547018550336360931396484375,
  "maxSpeed" : 6.02745618307040320615897144307382404804229736328125,
  "deviceId" : 0,
  "deviceName" : "deviceName",
  "duration" : 2,
  "endLat" : 3.61607674925191080461672754609026014804840087890625,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "startLon" : 9.301444243932575517419536481611430644989013671875,
  "driverUniqueId" : 4,
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "driverName" : "driverName",
  "endTime" : "2000-01-23T04:56:07.000+00:00",
  "endAddress" : "endAddress"
}, {
  "startLat" : 7.061401241503109105224211816675961017608642578125,
  "distance" : 5.962133916683182377482808078639209270477294921875,
  "startAddress" : "startAddress",
  "endLon" : 2.027123023002321833274663731572218239307403564453125,
  "averageSpeed" : 1.46581298050294517310021547018550336360931396484375,
  "maxSpeed" : 6.02745618307040320615897144307382404804229736328125,
  "deviceId" : 0,
  "deviceName" : "deviceName",
  "duration" : 2,
  "endLat" : 3.61607674925191080461672754609026014804840087890625,
  "spentFuel" : 5.63737665663332876420099637471139430999755859375,
  "startLon" : 9.301444243932575517419536481611430644989013671875,
  "driverUniqueId" : 4,
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "driverName" : "driverName",
  "endTime" : "2000-01-23T04:56:07.000+00:00",
  "endAddress" : "endAddress"
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter deviceId: (query)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[ReportTrips]> 
     */
    open class func reportsTripsGetWithRequestBuilder(from: Date, to: Date, deviceId: [Int]? = nil, groupId: [Int]? = nil) -> RequestBuilder<[ReportTrips]> {
        let path = "/reports/trips"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "deviceId": deviceId, 
            "groupId": groupId, 
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReportTrips]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch Server information
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serverGet(completion: @escaping ((_ data: Server?,_ error: Error?) -> Void)) {
        serverGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch Server information
     - GET /server
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "version" : "version",
  "coordinateFormat" : "coordinateFormat",
  "bingKey" : "bingKey",
  "readonly" : true,
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "mapUrl" : "mapUrl",
  "forceSettings" : true,
  "registration" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "map" : "map",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]

     - returns: RequestBuilder<Server> 
     */
    open class func serverGetWithRequestBuilder() -> RequestBuilder<Server> {
        let path = "/server"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Server>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Server information
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serverPut(body: Server, completion: @escaping ((_ data: Server?,_ error: Error?) -> Void)) {
        serverPutWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Server information
     - PUT /server
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "version" : "version",
  "coordinateFormat" : "coordinateFormat",
  "bingKey" : "bingKey",
  "readonly" : true,
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "mapUrl" : "mapUrl",
  "forceSettings" : true,
  "registration" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "map" : "map",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Server> 
     */
    open class func serverPutWithRequestBuilder(body: Server) -> RequestBuilder<Server> {
        let path = "/server"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Server>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close the Session
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sessionDelete(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sessionDeleteWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close the Session
     - DELETE /session
     - BASIC:
       - type: basic
       - name: basicAuth

     - returns: RequestBuilder<Void> 
     */
    open class func sessionDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch Session information
     
     - parameter token: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sessionGet(token: String? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        sessionGetWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch Session information
     - GET /session
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter token: (query)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func sessionGetWithRequestBuilder(token: String? = nil) -> RequestBuilder<User> {
        let path = "/session"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token
        ])

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new Session
     
     - parameter email: (form)  
     - parameter password: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sessionPost(email: String, password: String, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        sessionPostWithRequestBuilder(email: email, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new Session
     - POST /session
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter email: (form)  
     - parameter password: (form)  

     - returns: RequestBuilder<User> 
     */
    open class func sessionPostWithRequestBuilder(email: String, password: String) -> RequestBuilder<User> {
        let path = "/session"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "email": email,
            "password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch server Statistics
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func statisticsGet(from: Date, to: Date, completion: @escaping ((_ data: [Statistics]?,_ error: Error?) -> Void)) {
        statisticsGetWithRequestBuilder(from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch server Statistics
     - GET /statistics
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "captureTime" : "2000-01-23T04:56:07.000+00:00",
  "messagesReceived" : 5,
  "activeUsers" : 0,
  "requests" : 1,
  "activeDevices" : 6,
  "messagesStored" : 5
}, {
  "captureTime" : "2000-01-23T04:56:07.000+00:00",
  "messagesReceived" : 5,
  "activeUsers" : 0,
  "requests" : 1,
  "activeDevices" : 6,
  "messagesStored" : 5
} ]}]
     
     - parameter from: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 
     - parameter to: (query) in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; 

     - returns: RequestBuilder<[Statistics]> 
     */
    open class func statisticsGetWithRequestBuilder(from: Date, to: Date) -> RequestBuilder<[Statistics]> {
        let path = "/statistics"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Statistics]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch a list of Users
     
     - parameter userId: (query) Can only be used by admin or manager users (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGet(userId: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        usersGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetch a list of Users
     - GET /users
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example=[ {
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}, {
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter userId: (query) Can only be used by admin or manager users (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func usersGetWithRequestBuilder(userId: String? = nil) -> RequestBuilder<[User]> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId
        ])

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a User
     
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a User
     - DELETE /users/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func usersIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a User
     
     - parameter _id: (path)  
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdPut(_id: Int, body: User, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a User
     - PUT /users/{id}
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter _id: (path)  
     - parameter body: (body)  

     - returns: RequestBuilder<User> 
     */
    open class func usersIdPutWithRequestBuilder(_id: Int, body: User) -> RequestBuilder<User> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a User
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersPost(body: User, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a User
     - POST /users
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "deviceReadonly" : true,
  "poiLayer" : "poiLayer",
  "latitude" : 6.02745618307040320615897144307382404804229736328125,
  "zoom" : 5,
  "coordinateFormat" : "coordinateFormat",
  "token" : "token",
  "administrator" : true,
  "password" : "password",
  "readonly" : true,
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "limitCommands" : true,
  "twelveHourFormat" : true,
  "name" : "name",
  "disabled" : true,
  "attributes" : {
    "key" : "{}"
  },
  "id" : 0,
  "userLimit" : 2,
  "map" : "map",
  "deviceLimit" : 5,
  "email" : "email",
  "longitude" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<User> 
     */
    open class func usersPostWithRequestBuilder(body: User) -> RequestBuilder<User> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
